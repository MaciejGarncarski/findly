/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as AppAddingRouteImport } from './routes/_app/adding'
import { Route as AppAccountRouteImport } from './routes/_app/account'
import { Route as AuthAuthIndexRouteImport } from './routes/_auth/auth/index'
import { Route as AppBrowseIndexRouteImport } from './routes/_app/browse/index'
import { Route as AuthAuthSigninRouteImport } from './routes/_auth/auth/signin'
import { Route as AppBrowseItemIdRouteImport } from './routes/_app/browse/$itemId'
import { ServerRoute as ApiAuthGoogleRouteServerRouteImport } from './routes/api/auth/google/route'
import { ServerRoute as ApiAuthGoogleCallbackRouteServerRouteImport } from './routes/api/auth/google/callback/route'

const rootServerRouteImport = createServerRootRoute()

const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppAddingRoute = AppAddingRouteImport.update({
  id: '/adding',
  path: '/adding',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppAccountRoute = AppAccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => AppRouteRoute,
} as any)
const AuthAuthIndexRoute = AuthAuthIndexRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AppBrowseIndexRoute = AppBrowseIndexRouteImport.update({
  id: '/browse/',
  path: '/browse/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AuthAuthSigninRoute = AuthAuthSigninRouteImport.update({
  id: '/auth/signin',
  path: '/auth/signin',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AppBrowseItemIdRoute = AppBrowseItemIdRouteImport.update({
  id: '/browse/$itemId',
  path: '/browse/$itemId',
  getParentRoute: () => AppRouteRoute,
} as any)
const ApiAuthGoogleRouteServerRoute =
  ApiAuthGoogleRouteServerRouteImport.update({
    id: '/api/auth/google',
    path: '/api/auth/google',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiAuthGoogleCallbackRouteServerRoute =
  ApiAuthGoogleCallbackRouteServerRouteImport.update({
    id: '/callback',
    path: '/callback',
    getParentRoute: () => ApiAuthGoogleRouteServerRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/account': typeof AppAccountRoute
  '/adding': typeof AppAddingRoute
  '/': typeof AppIndexRoute
  '/browse/$itemId': typeof AppBrowseItemIdRoute
  '/auth/signin': typeof AuthAuthSigninRoute
  '/browse': typeof AppBrowseIndexRoute
  '/auth': typeof AuthAuthIndexRoute
}
export interface FileRoutesByTo {
  '/account': typeof AppAccountRoute
  '/adding': typeof AppAddingRoute
  '/': typeof AppIndexRoute
  '/browse/$itemId': typeof AppBrowseItemIdRoute
  '/auth/signin': typeof AuthAuthSigninRoute
  '/browse': typeof AppBrowseIndexRoute
  '/auth': typeof AuthAuthIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteRouteWithChildren
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_app/account': typeof AppAccountRoute
  '/_app/adding': typeof AppAddingRoute
  '/_app/': typeof AppIndexRoute
  '/_app/browse/$itemId': typeof AppBrowseItemIdRoute
  '/_auth/auth/signin': typeof AuthAuthSigninRoute
  '/_app/browse/': typeof AppBrowseIndexRoute
  '/_auth/auth/': typeof AuthAuthIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/account'
    | '/adding'
    | '/'
    | '/browse/$itemId'
    | '/auth/signin'
    | '/browse'
    | '/auth'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/account'
    | '/adding'
    | '/'
    | '/browse/$itemId'
    | '/auth/signin'
    | '/browse'
    | '/auth'
  id:
    | '__root__'
    | '/_app'
    | '/_auth'
    | '/_app/account'
    | '/_app/adding'
    | '/_app/'
    | '/_app/browse/$itemId'
    | '/_auth/auth/signin'
    | '/_app/browse/'
    | '/_auth/auth/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/google': typeof ApiAuthGoogleRouteServerRouteWithChildren
  '/api/auth/google/callback': typeof ApiAuthGoogleCallbackRouteServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/google': typeof ApiAuthGoogleRouteServerRouteWithChildren
  '/api/auth/google/callback': typeof ApiAuthGoogleCallbackRouteServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/google': typeof ApiAuthGoogleRouteServerRouteWithChildren
  '/api/auth/google/callback': typeof ApiAuthGoogleCallbackRouteServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/google' | '/api/auth/google/callback'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/google' | '/api/auth/google/callback'
  id: '__root__' | '/api/auth/google' | '/api/auth/google/callback'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthGoogleRouteServerRoute: typeof ApiAuthGoogleRouteServerRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/adding': {
      id: '/_app/adding'
      path: '/adding'
      fullPath: '/adding'
      preLoaderRoute: typeof AppAddingRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/account': {
      id: '/_app/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AppAccountRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_auth/auth/': {
      id: '/_auth/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthAuthIndexRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_app/browse/': {
      id: '/_app/browse/'
      path: '/browse'
      fullPath: '/browse'
      preLoaderRoute: typeof AppBrowseIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_auth/auth/signin': {
      id: '/_auth/auth/signin'
      path: '/auth/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthAuthSigninRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_app/browse/$itemId': {
      id: '/_app/browse/$itemId'
      path: '/browse/$itemId'
      fullPath: '/browse/$itemId'
      preLoaderRoute: typeof AppBrowseItemIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/google': {
      id: '/api/auth/google'
      path: '/api/auth/google'
      fullPath: '/api/auth/google'
      preLoaderRoute: typeof ApiAuthGoogleRouteServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/google/callback': {
      id: '/api/auth/google/callback'
      path: '/callback'
      fullPath: '/api/auth/google/callback'
      preLoaderRoute: typeof ApiAuthGoogleCallbackRouteServerRouteImport
      parentRoute: typeof ApiAuthGoogleRouteServerRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppAccountRoute: typeof AppAccountRoute
  AppAddingRoute: typeof AppAddingRoute
  AppIndexRoute: typeof AppIndexRoute
  AppBrowseItemIdRoute: typeof AppBrowseItemIdRoute
  AppBrowseIndexRoute: typeof AppBrowseIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppAccountRoute: AppAccountRoute,
  AppAddingRoute: AppAddingRoute,
  AppIndexRoute: AppIndexRoute,
  AppBrowseItemIdRoute: AppBrowseItemIdRoute,
  AppBrowseIndexRoute: AppBrowseIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthAuthSigninRoute: typeof AuthAuthSigninRoute
  AuthAuthIndexRoute: typeof AuthAuthIndexRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthAuthSigninRoute: AuthAuthSigninRoute,
  AuthAuthIndexRoute: AuthAuthIndexRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface ApiAuthGoogleRouteServerRouteChildren {
  ApiAuthGoogleCallbackRouteServerRoute: typeof ApiAuthGoogleCallbackRouteServerRoute
}

const ApiAuthGoogleRouteServerRouteChildren: ApiAuthGoogleRouteServerRouteChildren =
  {
    ApiAuthGoogleCallbackRouteServerRoute:
      ApiAuthGoogleCallbackRouteServerRoute,
  }

const ApiAuthGoogleRouteServerRouteWithChildren =
  ApiAuthGoogleRouteServerRoute._addFileChildren(
    ApiAuthGoogleRouteServerRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthGoogleRouteServerRoute: ApiAuthGoogleRouteServerRouteWithChildren,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
